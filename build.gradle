import com.github.jk1.license.render.*

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
    }

    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        classpath 'com.github.jk1:gradle-license-report:1.7'
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

apply from: "$rootDir/gradle/ext/coding-format.gradle"
apply plugin: 'com.github.jk1.dependency-license-report'

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

group 'org.ow2.proactive'
version projectVersion

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }
}

defaultTasks 'clean', 'jar'

repositories {
    if (project.hasProperty('local')) {
        mavenLocal()
    }

    mavenCentral()
    maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
}

dependencies {
    compile "com.google.guava:guava:19.0"
    compile "javax.mail:mail:1.4.7"

    testCompile "com.google.truth:truth:0.28"
    testCompile "junit:junit:4.12"
    testCompile 'org.mockito:mockito-core:1.10.19'
}

jar {
    from {
        configurations.compile
                .findAll { !it.name.toLowerCase().contains("slf4j") }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}
